name: Deploy Kind Cluster with ArgoCD and Traefik

on:
  push:
    branches: [main, develop]
    paths:
      - "terraform/kind-practice/**"
  pull_request:
    branches: [main]
    paths:
      - "terraform/kind-practice/**"
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy
          - plan

env:
  TF_VERSION: "1.9.0"
  KUBECTL_VERSION: "v1.28.0"
  HELM_VERSION: "v3.14.0"
  WORKING_DIR: terraform/kind-practice
  KUBECONFIG: "$HOME/.kube/test-cluster-config"

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Docker (if not available)
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          docker --version

      - name: Install Kind
        run: |
          if ! command -v kind &> /dev/null; then
            echo "Installing Kind..."
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
          fi
          kind version

      - name: Install kubectl
        run: |
          if ! command -v kubectl &> /dev/null; then
            echo "Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          kubectl version --client

      - name: Install Helm
        run: |
          if ! command -v helm &> /dev/null; then
            echo "Installing Helm..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi
          helm version

      - name: Cleanup existing clusters
        run: |
          # 기존 test-cluster가 있다면 삭제
          if kind get clusters | grep -q "test-cluster"; then
            echo "Removing existing test-cluster..."
            kind delete cluster --name test-cluster
          fi

          # Docker 컨테이너 정리
          docker container prune -f
          docker network prune -f

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan 📋

            <details><summary>Show Plan</summary>

            \`\`\`
            ${{ steps.plan.outputs.plan_output }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event.inputs.action == 'apply')
        run: |
          terraform apply -auto-approve tfplan

          # 클러스터가 준비될 때까지 대기
          echo "Waiting for cluster to be ready..."
          timeout 300 bash -c '
            until kubectl get nodes | grep -q "Ready"; do
              echo "Waiting for nodes to be ready..."
              sleep 10
            done
          '

          # ArgoCD와 Traefik 파드가 준비될 때까지 대기
          echo "Waiting for ArgoCD pods..."
          kubectl wait --for=condition=ready pod --all -n argocd --timeout=600s

          echo "Waiting for Traefik pods..."
          kubectl wait --for=condition=ready pod --all -n default -l app.kubernetes.io/name=traefik --timeout=300s

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve

      - name: Get Service Information
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event.inputs.action == 'apply')
        run: |
          echo "=== Cluster Information ==="
          kubectl cluster-info

          echo -e "\n=== Available Services ==="
          kubectl get svc --all-namespaces

          echo -e "\n=== Access Information ==="
          echo "🌐 Service Access URLs:"
          echo "• Traefik Dashboard: http://$(hostname -I | awk '{print $1}'):8090"
          echo "• Traefik HTTP: http://$(hostname -I | awk '{print $1}'):8080"
          echo "• Traefik HTTPS: https://$(hostname -I | awk '{print $1}'):8444"
          echo "• ArgoCD Dashboard: http://$(hostname -I | awk '{print $1}'):8091"

          echo -e "\n🔑 ArgoCD Login Information:"
          echo "Username: admin"
          echo -n "Password: "
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          echo ""

      - name: Health Check
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event.inputs.action == 'apply')
        run: |
          echo "=== Health Check ==="

          # 노드 상태 확인
          echo "Node Status:"
          kubectl get nodes

          # 파드 상태 확인
          echo -e "\nPod Status:"
          kubectl get pods --all-namespaces

          # 서비스 연결 테스트
          echo -e "\nService Connectivity Test:"

          # Traefik 대시보드 테스트
          if curl -f -s -m 10 http://localhost:8090 > /dev/null; then
            echo "✅ Traefik Dashboard: Accessible"
          else
            echo "❌ Traefik Dashboard: Not accessible"
          fi

          # ArgoCD 테스트
          if curl -f -s -k -m 10 http://localhost:8091 > /dev/null; then
            echo "✅ ArgoCD Dashboard: Accessible"
          else
            echo "❌ ArgoCD Dashboard: Not accessible"
          fi

      - name: Save Cluster State
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event.inputs.action == 'apply')
        run: |
          # kubeconfig 백업
          mkdir -p ~/.kube/backups
          cp ./test-cluster-config ~/.kube/backups/test-cluster-config-$(date +%Y%m%d-%H%M%S)

          # 클러스터 정보 저장
          kubectl get all --all-namespaces -o yaml > cluster-state-$(date +%Y%m%d-%H%M%S).yaml

  cleanup:
    name: Cleanup on Failure
    runs-on: self-hosted
    needs: terraform
    if: failure()
    steps:
      - name: Cleanup Failed Deployment
        run: |
          echo "Cleaning up failed deployment..."

          # Kind 클러스터 삭제
          if kind get clusters | grep -q "test-cluster"; then
            kind delete cluster --name test-cluster
          fi

          # Docker 정리
          docker container prune -f
          docker network prune -f
          docker volume prune -f
